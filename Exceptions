1. Write a program in Java to display the names and roll numbers of students. Initialize respective array variables for 10 students. Handle ArrayIndexOutOfBoundsExeption, so that any such problem doesnâ€™t cause illegal termination of program. 
CODE:
import java.util.Scanner;
class test
{
public static void main(String args[])
{
int i;
String name[]= new String[10];
int roll[]= new int[10];
Scanner sc= new Scanner(System.in);
try
{
for(i=0;i<11;i++)
{
System.out.println("Enter name of student\t" + (i+1) );
name[i]=sc.nextLine();
System.out.println("Enter rollno of student\t" + (i+1));
roll[i]=Integer.parseInt(sc.nextLine());
}
}
catch (ArrayIndexOutOfBoundsException e)
 {
System.out.println("Array is out of Bounds"+e);
}
for(i=0;i<11;i++)
{
System.out.println("name of student \t" + (i+1) + "\t is" );
System.out.println(name[i]);
System.out.println("name of roll \t" + (i+1) + "\t is" );
System.out.println(roll[i]);
}
}
}



2. Write a Java program to enable the user to handle any chance of divide  by zero exception. 
CODE:
class zero
{
public static void main(String arg[])
{
int no=0,m=10,result=0;
try
{
result=m/no;
}
catch(ArithmeticException e)
{
System.out.println(" Division by zero ");
System.out.println(" Value of result has been set as one");
result=1;
}
catch(Exception e)
{
System.out.println(e);
}
System.out.println("Result :"+result);
}
}



3. Create an exception class, which throws an exception if operand is non numeric in calculating modules. (Use command line arguments). 
CODE:
class NonNum extends Exception
{
NonNum()
{ 
super("the value is non numeric \n"); 
}
}
class numeric
{
public static void main(String ar[])
{
int a,b,c=0;
try
{
a=Integer.parseInt(ar[0]);
throw new NonNum();
}
catch(NumberFormatException e)
{
System.out.println(e);
}
catch(NonNum e)
{
System.out.println(e);
}
}
}



4. On a single track two vehicles are running. As vehicles are going in same direction there is no problem. If the vehicles are running in different direction there is a chance of collision. To avoid collisions write a Java program using exception handling. You are free to make necessary assumptions.
CODE:
DRIVER PROGRAM:
import java.util.Scanner;
import V1.VehicleException;
class Vehicle{
public static void main(String args[]){
System.out.println("Enter two direction for two cars Press 1 for right and 2 for left:");
Scanner sc= new Scanner(System.in);
int x, y;
x=sc.nextInt();
y=sc.nextInt();
try
{
checkVehicleException (x, y); 
System.out.println ("Vehicles can pass without collision");
} 
catch (VehicleException e)
{
System.out.println (e + "\n");
} 
}
public static void
checkVehicleException (int x, int y)
throws VehicleException
{
if (x == y)
{
throw new VehicleException ("Error: Same direction. They will collide  ");
}
}
}

PACKAGE:
package V1 ;
public class VehicleException extends  Exception{
public VehicleException (String S){
super(S);
}
}



5. Write a java program to throw an exception  for an employee details. If an employee name is a number, a name exception must be thrown. If an employee age is greater than 50, an age exception must be thrown. Or else an object must be created for the entered employee details
CODE:
import java.util.*;
class Employee
{
public static void main(String args[])
{
String name;
int age;
System.out.println("Enter The Employee Details");
System.out.println("Enter Name and Age:");
Scanner in=new Scanner(System.in);
try
{
name=in.nextLine();
if(!(in.nextLine().matches("[a-zA-Z]+")))
{
throw new Exception();
}
age=in.nextInt();
if(age>50)
{
System.out.println("Age greater than 50 Exception");
throw new Exception();
}
Employee x=new Employee();
System.out.println("-----Object Created-----");
}
catch(Exception e)
{
System.out.println("Exception");
}
}
}
