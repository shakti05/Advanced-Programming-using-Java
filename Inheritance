1. Write a Java program to show that private member of a super class cannot be accessed from derived classes. 
CODE:
class parent{
private int i =10;
private void cls(){
System.out.println("*");
}
int asc(){
     return i;
}
}
class derived extends parent{
public static void main(String args[]){ 
int c;
parent obj= new parent();
c=obj.asc();
System.out.println(c);
}
}



2. Write a program in Java to create a Player class. Inherit the classes  Cricket _Player, Football _Player and Hockey_ Player from Player class. 
CODE:
class player{
public void play(){
int i=5;
System.out.println(i);
}
}
class hockey_player extends player{

void show1(){
System.out.println("i.");
}
}
class cricket_player extends player{

void show2(){
System.out.println("ii.");
}
}
class football_player extends player{
void show3(){
System.out.println("iii.");
}
}
class main_player{
public static void main(String args[]){
football_player obj1 = new  football_player();
obj1.play();
obj1.show3();
hockey_player obj2= new hockey_player();
obj2.play();
obj2.show1();
cricket_player obj3= new cricket_player();
obj3.play();
obj3.show2();
}
}



3. Write a class Worker and derive classes DailyWorker and SalariedWorker from it. Every worker has a name and a salary rate. Write method ComPay (int hours) to compute the week pay of every worker.
CODE:
import java.util.*;
class worker
{
int wg2;
double wg1;
Scanner sc= new Scanner(System.in);
int i;
worker()
{
String name;
System.out.println("enter the name of the employee");
name=sc.nextLine();
System.out.println("name of employee is" +name);
}
void ComPay(double week)
{
double wg1= 40*100*week;
System.out.println(wg1);
}
void ComPay(int day)
{
wg2=day*800;
System.out.println(wg2);
} }

class SalariedWorker extends worker{
void show1()
{
System.out.println("wage of salaried worker is"+ wg1);
}}
class DailyWorker extends worker
{
void show2()
{
System.out.println("wage of  daily worker is"+ wg2);
}}
class work{
public static void main(String args[]){
SalariedWorker sw1 =new SalariedWorker();
sw1.ComPay(10.5);
DailyWorker dw1= new DailyWorker(); 
dw1.ComPay(10);
}}



4. Consider the trunk calls of a telephone exchange. A trunk call can be ordinary, urgent or lightning. The charges depend on the duration and the type of the call. Write a program using the concept of polymorphism in Java to calculate the charges.
CODE:
import java.util.Scanner;
class trunk
{
public static void main(String args[]){
int duration;
System.out.println("Enter the type of call you want to make: \t 1. Ordianry 2.Urgent 3.Lightning");
Scanner sc= new Scanner(System.in);
int choice=sc.nextInt();
switch(choice)
{
case 1:
charge c1=new charge();
break;
case 2:
System.out.println("Enter the duration");
duration=sc.nextInt();
charge c2=new charge(duration);
break;
case 3:
System.out.println("Enter the duration in decimal");
duration=sc.nextInt();
charge c3=new charge(duration);
break;
default:
System.out.println("Error Occured! Try Again.");
}}}
class charge
{
int cost;
 charge()
 {
cost=100;
System.out.println("Fixed charges are" + cost);
}
charge(int duration)
{
cost=20*duration;
System.out.println("Charges are" + cost);
}
charge(double duration)
{
cost=(int)(30*duration);
System.out.println("your charges are" + cost);
}}


5. Design a class employee of an organization. An employee has a name, empid, and salary. Write the default constructor, a constructor with parameters and methods to return name and salary. 
CODE:
import java.util.*;
class Employee
{
Scanner sc= new Scanner(System.in);
String name;
int empid;
int sal;
Employee(){
System.out.println("Enter Name");
name =sc.nextLine();
System.out.println("Enter Employee Id");
empid =sc.nextInt();
System.out.println("Enter sal");
sal=sc.nextInt();
}
Employee(String name,int empid,int sal){
System.out.println("Name of the employee is\t"+name);
System.out.println("Employee Id is\t"+ empid);
System.out.println(" old sal is\t"+ sal);
}
int increasesal(){
  sal = (int) (sal+sal*0.2);  
  return sal;
  }
String method1(){
 this.name=name;     
 return name;
}
int  method2(){
this.sal=sal;  
 return sal;
}}
class Manager extends Employee
{
Scanner sc= new Scanner(System.in);
String department;
Manager(){
System.out.println("Enter department");
department=sc.nextLine();
System.out.println("department is\t"+department);
}}
class test_emp
{
 public static void main(String args[]){
 Scanner sc= new Scanner(System.in);
Manager m1= new Manager();
Employee e1= new Employee();
e1.increasesal();
System.out.println("Name of Employee  is\t" +e1.method1());
System.out.println("New updated sal is\t" +e1.method2());
System.out.println("Name of Employee  is\t" +m1.method1());
System.out.println("New updated sal is\t" +m1.method2());
Employee e2=new Employee("shef",12,13);
}}

